version: "3"

name: cowsay

services:
  database:
    build: ./database
    ports:
      - "${DB_PORT}:${DB_PORT}"
    networks:
      - backend
    volumes:
      - db_init:/docker-entrypoint-initdb.d
      # Persists the data in the volume
      # - db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_PORT=${DB_PORT}

  server:
    build: ./server
    ports:
      - "5555:5555"
    networks:
      - devops
      - backend
    depends_on:
      - database
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - CACHE_HOST=${CACHE_HOST}
      - CACHE_PORT=${CACHE_PORT}
      - CACHE_PASSWORD=${CACHE_PASSWORD}
      - CACHE_TIMEOUT=${CACHE_TIMEOUT}

  client:
    build: ./client
    ports:
      - "80:80"
    networks:
      - frontend
    depends_on:
      - server
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=80"

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - devops

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources/
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards/
    depends_on:
      - prometheus
    networks:
      - devops

  nginx-prometheus-exporter:
    image: nginx/nginx-prometheus-exporter:1.1.0
    ports:
      - "9113:9113"
    command: [ "--nginx.scrape-uri=http://client/metrics" ]
    depends_on:
      - client
    networks:
      - frontend
      - devops

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
    ports:
      - "9187:9187"
    depends_on:
      - database
    networks:
      - backend
      - devops

  redis:
    image: redis
    ports:
      - "6379:6379"
    networks:
      - backend
    command: >
      --requirepass ${CACHE_PASSWORD}

  redis-exporter:
    image: oliver006/redis_exporter
    environment:
      REDIS_ADDR: "redis://:${CACHE_PASSWORD}@redis:6379"
    ports:
      - "9121:9121"
    networks:
      - backend
      - devops
    depends_on:
      - redis

  jumpbox:
    image: ubuntu
    networks:
      - backend
      - frontend
      - devops

volumes:
  db_init:
  db_data:

networks:
  frontend:
  backend:
  devops:
