version: "3"

name: cowsay

services:
  database:
    build: ./database
    networks:
      - backend
    volumes:
      - db_init:/docker-entrypoint-initdb.d
      - ./init_db/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
      - ./init_db/create_readonly_user.sql.template:/docker-entrypoint-initdb.d/create_readonly_user.sql.template
      # - db_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGPORT=${DB_PORT}
      - READONLY_DB_USER=${READONLY_DB_USER}
      - READONLY_DB_PASSWORD=${READONLY_DB_PASSWORD}

  personality_db:
    build: ./personality_database
    environment:
      - POSTGRES_DB=${PERSONALITY_DB_NAME}
      - POSTGRES_USER=${PERSONALITY_DB_USER}
      - POSTGRES_PASSWORD=${PERSONALITY_DB_PASSWORD}
      - PGPORT=${PERSONALITY_DB_PORT}
      - READONLY_DB_USER=${READONLY_PERSONALITY_DB_USER}
      - READONLY_DB_PASSWORD=${READONLY_PERSONALITY_DB_PASSWORD}
    networks:
      - backend
    volumes:
      - personality_db_init:/docker-entrypoint-initdb.d
      - ./init_db/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh
      - ./init_db/create_readonly_user.sql.template:/docker-entrypoint-initdb.d/create_readonly_user.sql.template
      # - personality_db_data:/var/lib/postgresql/data

  server:
    build: ./server
    ports:
      - "5555:5555"
    networks:
      - devops
      - backend
    depends_on:
      - database
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${READONLY_DB_USER}
      - DB_PASSWORD=${READONLY_DB_PASSWORD}
      - CACHE_HOST=${CACHE_HOST}
      - CACHE_PORT=${CACHE_PORT}
      - CACHE_PASSWORD=${CACHE_PASSWORD}
      - CACHE_TIMEOUT=${CACHE_TIMEOUT}
      - PERSONALITY_DB_HOST=${PERSONALITY_DB_HOST}
      - PERSONALITY_DB_PORT=${PERSONALITY_DB_PORT}
      - PERSONALITY_DB_NAME=${PERSONALITY_DB_NAME}
      - PERSONALITY_DB_USER=${READONLY_PERSONALITY_DB_USER} # change this to READONLY_PERSONALITY_DB_USER
      - PERSONALITY_DB_PASSWORD=${READONLY_PERSONALITY_DB_PASSWORD}

  client:
    build: ./client
    ports:
      - "80:80"
    networks:
      - frontend
    depends_on:
      - server
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=80"

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - devops

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_LOG_LEVEL: warning
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources/
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards/
    depends_on:
      - prometheus
    networks:
      - devops

  nginx-prometheus-exporter:
    image: nginx/nginx-prometheus-exporter:1.1.0
    command: ["--nginx.scrape-uri=http://client/metrics"]
    depends_on:
      - client
    networks:
      - frontend
      - devops

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable
    depends_on:
      - database
    networks:
      - backend
      - devops

  personality-postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    environment:
      - DATA_SOURCE_NAME=postgresql://${PERSONALITY_DB_USER}:${PERSONALITY_DB_PASSWORD}@${PERSONALITY_DB_HOST}:${PERSONALITY_DB_PORT}/${PERSONALITY_DB_NAME}?sslmode=disable
    depends_on:
      - personality_db
    networks:
      - backend
      - devops

  redis:
    image: redis
    networks:
      - backend
    command: >
      --requirepass ${CACHE_PASSWORD}

  redis-exporter:
    image: oliver006/redis_exporter
    environment:
      REDIS_ADDR: "redis://:${CACHE_PASSWORD}@redis:6379"
    networks:
      - backend
      - devops
    depends_on:
      - redis

volumes:
  personality_db_init:
  personality_db_data:
  db_init:
  db_data:

networks:
  frontend:
  backend:
  devops:
