version: "3"

name: cowsay

services:
  movielens-db:
    build: ./databases/movielens
    networks:
      - backend
    volumes:
      - movielens_db_init:/docker-entrypoint-initdb.d
      - movielens_db_data:/var/lib/postgresql/data
      - ./databases/init/init.sh:/docker-entrypoint-initdb.d/init.sh
      - ./databases/init/readonly-user.sql.template:/docker-entrypoint-initdb.d/readonly-user.sql.template
    environment:
      POSTGRES_DB: ${MOVIELENS_DB_NAME}
      POSTGRES_USER: ${MOVIELENS_DB_USER}
      POSTGRES_PASSWORD: ${MOVIELENS_DB_PASSWORD}
      PGPORT: ${MOVIELENS_DB_PORT}
      DB_USER_READONLY: ${MOVIELENS_DB_USER_READONLY}
      DB_PASSWORD_READONLY: ${MOVIELENS_DB_PASSWORD_READONLY}

  personality-db:
    build: ./databases/personality
    networks:
      - backend
    volumes:
      - personality_db_init:/docker-entrypoint-initdb.d
      - personality_db_data:/var/lib/postgresql/data
      - ./databases/init/init.sh:/docker-entrypoint-initdb.d/init.sh
      - ./databases/init/readonly-user.sql.template:/docker-entrypoint-initdb.d/readonly-user.sql.template
    environment:
      POSTGRES_DB: ${PERSONALITY_DB_NAME}
      POSTGRES_USER: ${PERSONALITY_DB_USER}
      POSTGRES_PASSWORD: ${PERSONALITY_DB_PASSWORD}
      PGPORT: ${PERSONALITY_DB_PORT}
      DB_USER_READONLY: ${PERSONALITY_DB_USER_READONLY}
      DB_PASSWORD_READONLY: ${PERSONALITY_DB_PASSWORD_READONLY}

  redis:
    image: redis
    networks:
      - backend
    command: >
      --requirepass ${CACHE_PASSWORD}

  server:
    build: ./server
    ports:
      - "5555:5555"
    networks:
      - devops
      - backend
    depends_on:
      - movielens-db
      - personality-db
      - redis
    environment:
      MOVIELENS_DB_NAME: ${MOVIELENS_DB_NAME}
      MOVIELENS_DB_USER: ${MOVIELENS_DB_USER_READONLY}
      MOVIELENS_DB_PASSWORD: ${MOVIELENS_DB_PASSWORD_READONLY}
      MOVIELENS_DB_HOST: ${MOVIELENS_DB_HOST}
      MOVIELENS_DB_PORT: ${MOVIELENS_DB_PORT}
      PERSONALITY_DB_NAME: ${PERSONALITY_DB_NAME}
      PERSONALITY_DB_USER: ${PERSONALITY_DB_USER_READONLY}
      PERSONALITY_DB_PASSWORD: ${PERSONALITY_DB_PASSWORD_READONLY}
      PERSONALITY_DB_HOST: ${PERSONALITY_DB_HOST}
      PERSONALITY_DB_PORT: ${PERSONALITY_DB_PORT}
      CACHE_HOST: ${CACHE_HOST}
      CACHE_PORT: ${CACHE_PORT}
      CACHE_PASSWORD: ${CACHE_PASSWORD}
      CACHE_TIMEOUT: ${CACHE_TIMEOUT}

  client:
    build: ./client
    ports:
      - "80:80"
    networks:
      - frontend
    depends_on:
      - server
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=80"

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - devops

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_LOG_LEVEL: warning
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources/
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards/
    depends_on:
      - prometheus
    networks:
      - devops

  movielens-postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: postgresql://${MOVIELENS_DB_USER}:${MOVIELENS_DB_PASSWORD}@${MOVIELENS_DB_HOST}:${MOVIELENS_DB_PORT}/${MOVIELENS_DB_NAME}?sslmode=disable
    depends_on:
      - movielens-db
    networks:
      - backend
      - devops

  personality-postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    environment:
      DATA_SOURCE_NAME: postgresql://${PERSONALITY_DB_USER}:${PERSONALITY_DB_PASSWORD}@${PERSONALITY_DB_HOST}:${PERSONALITY_DB_PORT}/${PERSONALITY_DB_NAME}?sslmode=disable
    depends_on:
      - personality-db
    networks:
      - backend
      - devops

  redis-exporter:
    image: oliver006/redis_exporter
    environment:
      REDIS_ADDR: "redis://:${CACHE_PASSWORD}@redis:6379"
    depends_on:
      - redis
    networks:
      - backend
      - devops

  nginx-prometheus-exporter:
    image: nginx/nginx-prometheus-exporter:1.1.0
    command: [ "--nginx.scrape-uri=http://client/metrics" ]
    depends_on:
      - client
    networks:
      - frontend
      - devops

volumes:
  personality_db_init:
  personality_db_data:
  movielens_db_init:
  movielens_db_data:

networks:
  frontend:
  backend:
  devops:
